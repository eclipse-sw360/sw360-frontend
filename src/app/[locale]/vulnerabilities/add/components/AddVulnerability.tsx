// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { getSession, signOut } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { useRouter } from 'next/navigation'
import { ReactNode, useState } from 'react'

import { AccessControl } from '@/components/AccessControl/AccessControl'
import { ErrorDetails, HttpStatus, InputKeyValue, UserGroupType, Vulnerability } from '@/object-types'
import MessageService from '@/services/message.service'
import { ApiUtils, CommonUtils } from '@/utils'
import { AddKeyValue } from 'next-sw360'
import AddValues from '../../components/AddValues'
import CVEReferences from '../../components/CVEReferences'
import AddVendorAdvisory from '../../components/VendorAdvisories'
import VulnerabilityAccess from '../../components/VulnerabilityAccess'
import VulnerabilityDetail from '../../components/VulnerabilityDetail'
import VulnerabilityImpact from '../../components/VulnerabilityImpact'

function AddVulnerability(): ReactNode {
    const t = useTranslations('default')
    const router = useRouter()
    const [vulnerableConfiguration, setVulnerableConfiguration] = useState<Array<InputKeyValue>>([])
    const [vulnerabilityData, setVulnerabilityData] = useState<Vulnerability>({} as Vulnerability)

    const setDataVulnerableConfiguration = (config: Map<string, string>) => {
        const obj = Object.fromEntries(config)
        setVulnerabilityData((prev) => ({ ...prev, vulnerableConfiguration: obj }))
    }

    const handleCancel = () => {
        router.push('/vulnerabilities')
    }

    const handleSubmit = async () => {
        const currentDate = new Date()
        const date = currentDate.toISOString().slice(0, currentDate.toISOString().lastIndexOf('T'))
        const time = currentDate.toISOString().slice(currentDate.toISOString().lastIndexOf('T') + 1, -5)
        try {
            const session = await getSession()
            if (CommonUtils.isNullOrUndefined(session)) return signOut()
            const payload: Vulnerability = {
                title: vulnerabilityData.title,
                description: vulnerabilityData.description,
                externalId: vulnerabilityData.externalId,
                priority: vulnerabilityData.priority,
                priorityText: vulnerabilityData.priorityText,
                action: vulnerabilityData.action,
                legalNotice: vulnerabilityData.legalNotice,
                cwe: vulnerabilityData.cwe ? `CWE-${vulnerabilityData.cwe}` : undefined,
                extendedDescription: vulnerabilityData.extendedDescription,
                cvss: vulnerabilityData.cvss ?? 0,
                cvssTime: `${vulnerabilityData.cvssDate ?? date}T${vulnerabilityData.cvssTime ?? time}`,
                publishDate: `${vulnerabilityData.publishDate ?? date}T${vulnerabilityData.publishTime ?? time}`,
                lastExternalUpdate: `${
                    vulnerabilityData.lastExternalUpdateDate ?? date
                }T${vulnerabilityData.lastExternalUpdateTime ?? time}`,
                impact: vulnerabilityData.impact,
                access: vulnerabilityData.access,
                cveReferences: vulnerabilityData.cveReferences,
                references: Array.from(new Set(vulnerabilityData.references)),
                assignedExtComponentIds: Array.from(new Set(vulnerabilityData.assignedExtComponentIds)).filter(
                    (elem) => elem !== '',
                ),
                vendorAdvisories: Array.from(new Set(vulnerabilityData.vendorAdvisories)),
                vulnerableConfiguration: vulnerabilityData.vulnerableConfiguration,
            }

            const response = await ApiUtils.POST('vulnerabilities', payload, session.user.access_token)
            if (response.status == HttpStatus.CREATED) {
                const data = (await response.json()) as Record<string, string>
                MessageService.success(t('Vulnerability is created'))
                router.push('/vulnerabilities/detail/' + data.externalId)
            } else {
                const err = (await response.json()) as ErrorDetails
                throw new Error(err.message)
            }
        } catch (error) {
            if (error instanceof DOMException && error.name === 'AbortError') {
                return
            }
            const message = error instanceof Error ? error.message : String(error)
            MessageService.error(message)
        }
    }

    return (
        <>
            <div className='container page-content'>
                <form
                    action=''
                    id='add_vulnerability'
                    method='post'
                    onSubmit={(e) => {
                        e.preventDefault()
                        handleSubmit().catch((error) => console.error(error))
                    }}
                >
                    <div className='row mb-4'>
                        <button
                            type='submit'
                            className='btn btn-primary col-auto me-2'
                        >
                            {t('Create Vulnerability')}
                        </button>
                        <button
                            type='button'
                            id='createVulnerability.cancel'
                            className='btn btn-dark col-auto'
                            onClick={handleCancel}
                        >
                            {t('Cancel')}
                        </button>
                    </div>
                    <VulnerabilityDetail
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <VulnerabilityImpact
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <VulnerabilityAccess
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <CVEReferences
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <AddValues
                        componentName='Assigned External Component Ids'
                        entityName='Assigned External Component Id'
                        payloadKeyName='assignedExtComponentIds'
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <AddValues
                        componentName='Vulnerability References'
                        entityName='Vulnerability Reference'
                        payloadKeyName='references'
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <AddVendorAdvisory
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <div className='row mb-4'>
                        <AddKeyValue
                            header={t('Vulnerability Configuration')}
                            keyName={'Vulnerability configuration'}
                            setData={setVulnerableConfiguration}
                            data={vulnerableConfiguration}
                            setObject={setDataVulnerableConfiguration}
                        />
                    </div>
                </form>
            </div>
        </>
    )
}

// Pass notAllowedUserGroups to AccessControl to restrict access
export default AccessControl(AddVulnerability, [UserGroupType.SECURITY_USER])
