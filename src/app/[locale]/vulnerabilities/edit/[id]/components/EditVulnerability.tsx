// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { getSession, signOut } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { useRouter } from 'next/navigation'
import { Dispatch, ReactNode, SetStateAction, useEffect, useState } from 'react'
import { Spinner } from 'react-bootstrap'

import { AccessControl } from '@/components/AccessControl/AccessControl'
import { ErrorDetails, HttpStatus, UserGroupType, Vulnerability } from '@/object-types'
import MessageService from '@/services/message.service'
import { ApiUtils, CommonUtils } from '@/utils'
import { AddKeyValue } from 'next-sw360'
import AddValues from '../../../components/AddValues'
import CVEReferences from '../../../components/CVEReferences'
import DeleteVulnerabilityModal from '../../../components/DeleteVulnerabilityModal'
import AddVendorAdvisory from '../../../components/VendorAdvisories'
import VulnerabilityAccess from '../../../components/VulnerabilityAccess'
import VulnerabilityDetail from '../../../components/VulnerabilityDetail'
import VulnerabilityImpact from '../../../components/VulnerabilityImpact'

interface Input {
    key: string
    value: string
}

const convertDateTimeToDateOrTime = (date: string | undefined, type: 'date' | 'time') => {
    if (!date) return undefined
    if (date.split(':').length - 1 === 3) date = date.slice(date.lastIndexOf(':'))
    if (date.lastIndexOf('T') !== -1) {
        if (type === 'date') return date.slice(0, date.lastIndexOf('T'))
        else return date.slice(date.lastIndexOf('T') + 1)
    }
    if (date.lastIndexOf(' ') !== -1) {
        if (type === 'date') return date.slice(0, date.lastIndexOf(' '))
        else return date.slice(date.lastIndexOf(' ') + 1)
    }
    if (type === 'date') return date
    return date
}

function EditVulnerability({ vulnerabilityId }: { vulnerabilityId: string }): ReactNode {
    const t = useTranslations('default')
    const router = useRouter()
    const [vulnerableConfiguration, setVulnerableConfiguration] = useState<Input[] | undefined>(undefined)
    const [vulnerability, setVulnerability] = useState<Vulnerability | undefined>(undefined)
    const [vulnerabilityToBeDeleted, setVulnerabilityToBeDeleted] = useState<null | string>(null)

    const onDeleteClick = (id: string) => {
        setVulnerabilityToBeDeleted(id)
    }

    useEffect(() => {
        const controller = new AbortController()
        const signal = controller.signal

        void (async () => {
            try {
                const session = await getSession()
                if (CommonUtils.isNullOrUndefined(session)) return signOut()
                const response = await ApiUtils.GET(
                    `vulnerabilities/${vulnerabilityId}`,
                    session.user.access_token,
                    signal,
                )

                if (response.status !== HttpStatus.OK) {
                    const err = (await response.json()) as ErrorDetails
                    throw new Error(err.message)
                }

                const data = (await response.json()) as Vulnerability
                setVulnerableConfiguration(
                    CommonUtils.convertObjectToMap((data.vulnerableConfiguration ?? {}) as { [k: string]: string }),
                )

                setVulnerability({
                    title: data.title ?? '',
                    description: data.description ?? '',
                    externalId: data.externalId ?? '',
                    priority: data.priority ?? '',
                    priorityText: data.priorityText ?? '',
                    action: data.action ?? '',
                    legalNotice: data.legalNotice,
                    cwe: data.cwe !== undefined ? data.cwe.slice(data.cwe.indexOf('-') + 1) : '',
                    extendedDescription: data.extendedDescription ?? '',
                    cvss: data.cvss ?? 0.0,
                    cvssDate: convertDateTimeToDateOrTime(data.cvssTime, 'date'),
                    cvssTime: convertDateTimeToDateOrTime(data.cvssTime, 'time'),
                    publishDate: convertDateTimeToDateOrTime(data.publishDate, 'date'),
                    publishTime: convertDateTimeToDateOrTime(data.publishDate, 'time'),
                    lastExternalUpdateDate: convertDateTimeToDateOrTime(data.lastExternalUpdate, 'date'),
                    lastExternalUpdateTime: convertDateTimeToDateOrTime(data.lastExternalUpdate, 'time'),
                    impact: {
                        availability: data.impact?.availability ?? '',
                        confidentiality: data.impact?.confidentiality ?? '',
                        integrity: data.impact?.integrity ?? '',
                    },
                    access: {
                        authentication: data.access?.authentication ?? '',
                        complexity: data.access?.complexity ?? '',
                        vector: data.access?.vector ?? '',
                    },
                    cveReferences: data.cveReferences ?? [],
                    references: data.references ?? [],
                    assignedExtComponentIds: data.assignedExtComponentIds ?? [],
                    vendorAdvisories: data.vendorAdvisories ?? [],
                    vulnerableConfiguration: data.vulnerableConfiguration ?? {},
                })
            } catch (error) {
                if (error instanceof DOMException && error.name === 'AbortError') {
                    return
                }
                const message = error instanceof Error ? error.message : String(error)
                MessageService.error(message)
            }
        })()

        return () => controller.abort()
    }, [vulnerabilityId])

    const setDataVulnerableConfiguration = (config: Map<string, string>) => {
        const obj = Object.fromEntries(config)
        setVulnerability((prev) => ({ ...prev, vulnerableConfiguration: obj }) as Vulnerability)
    }

    const handleCancel = () => {
        router.push('/vulnerabilities')
    }

    const handleSubmit = async () => {
        const currentDate = new Date()
        const date = currentDate.toISOString().slice(0, currentDate.toISOString().lastIndexOf('T'))
        const time = currentDate.toISOString().slice(currentDate.toISOString().lastIndexOf('T') + 1, -5)
        try {
            const session = await getSession()
            if (CommonUtils.isNullOrUndefined(session)) return signOut()
            const payload: Vulnerability = {
                title: vulnerability?.title,
                description: vulnerability?.description,
                externalId: vulnerability?.externalId,
                priority: vulnerability?.priority,
                priorityText: vulnerability?.priorityText,
                action: vulnerability?.action,
                legalNotice: vulnerability?.legalNotice ?? '',
                cwe: vulnerability?.cwe ? `CWE-${vulnerability?.cwe}` : undefined,
                extendedDescription: vulnerability?.extendedDescription,
                cvss: vulnerability?.cvss,
                cvssTime: `${date}T${time}`,
                publishDate: `${vulnerability?.publishDate ?? date}T${vulnerability?.publishTime ?? time}`,
                lastExternalUpdate: `${date}T${time}`,
                impact: vulnerability?.impact,
                access: vulnerability?.access,
                cveReferences: vulnerability?.cveReferences ?? [],
                references: Array.from(new Set(vulnerability?.references)),
                assignedExtComponentIds: Array.from(new Set(vulnerability?.assignedExtComponentIds)).filter(
                    (elem) => elem !== '',
                ),
                vendorAdvisories: Array.from(new Set(vulnerability?.vendorAdvisories)),
                vulnerableConfiguration: vulnerability?.vulnerableConfiguration,
            }
            const response = await ApiUtils.PATCH(
                `vulnerabilities/${vulnerabilityId}`,
                payload,
                session.user.access_token,
            )
            if (response.status == HttpStatus.CREATED) {
                MessageService.success(t('Vulnerability updated successfully'))
                router.push('/vulnerabilities/detail/' + vulnerabilityId)
            } else {
                const err = (await response.json()) as ErrorDetails
                throw new Error(err.message)
            }
        } catch (error) {
            if (error instanceof DOMException && error.name === 'AbortError') {
                return
            }
            const message = error instanceof Error ? error.message : String(error)
            MessageService.error(message)
        }
    }

    return (
        <>
            {vulnerability && vulnerableConfiguration ? (
                <>
                    <DeleteVulnerabilityModal
                        vulnerabilityId={vulnerabilityToBeDeleted}
                        setVulnerability={setVulnerabilityToBeDeleted}
                        isEditPage={true}
                    />
                    <div className='mx-5 mt-3'>
                        <form
                            action=''
                            id='add_vulnerability'
                            method='post'
                            onSubmit={(e) => {
                                e.preventDefault()
                                handleSubmit().catch((error) => console.error(error))
                            }}
                        >
                            <div className='row mb-4'>
                                <button
                                    type='submit'
                                    className='btn btn-primary col-auto me-2'
                                >
                                    {t('Update Vulnerability')}
                                </button>
                                <button
                                    type='button'
                                    className='btn btn-danger col-auto me-2'
                                    onClick={() => {
                                        onDeleteClick(vulnerabilityId)
                                    }}
                                >
                                    {t('Delete Vulnerability')}
                                </button>
                                <button
                                    type='button'
                                    id='createVulnerability.cancel'
                                    className='btn btn-dark col-auto'
                                    onClick={handleCancel}
                                >
                                    {t('Cancel')}
                                </button>
                            </div>
                            <VulnerabilityDetail
                                payload={vulnerability}
                                setPayload={setVulnerability as Dispatch<SetStateAction<Vulnerability>>}
                            />
                            <VulnerabilityImpact
                                payload={vulnerability}
                                setPayload={setVulnerability as Dispatch<SetStateAction<Vulnerability>>}
                            />
                            <VulnerabilityAccess
                                payload={vulnerability}
                                setPayload={setVulnerability as Dispatch<SetStateAction<Vulnerability>>}
                            />
                            <CVEReferences
                                payload={vulnerability}
                                setPayload={setVulnerability as Dispatch<SetStateAction<Vulnerability>>}
                            />
                            <AddValues
                                componentName='Assigned External Component Ids'
                                entityName='Assigned External Component Id'
                                payloadKeyName='assignedExtComponentIds'
                                payload={vulnerability}
                                setPayload={setVulnerability as Dispatch<SetStateAction<Vulnerability>>}
                            />
                            <AddValues
                                componentName='Vulnerability References'
                                entityName='Vulnerability Reference'
                                payloadKeyName='references'
                                payload={vulnerability}
                                setPayload={setVulnerability as Dispatch<SetStateAction<Vulnerability>>}
                            />
                            <AddVendorAdvisory
                                payload={vulnerability}
                                setPayload={setVulnerability as Dispatch<SetStateAction<Vulnerability>>}
                            />
                            <div className='row mb-4'>
                                <AddKeyValue
                                    header={t('Vulnerability Configuration')}
                                    keyName={'Vulnerability configuration'}
                                    setData={setVulnerableConfiguration as Dispatch<SetStateAction<Input[]>>}
                                    data={vulnerableConfiguration}
                                    setObject={setDataVulnerableConfiguration}
                                />
                            </div>
                        </form>
                    </div>
                </>
            ) : (
                <div
                    className='col-12'
                    style={{ textAlign: 'center' }}
                >
                    <Spinner className='spinner' />
                </div>
            )}
        </>
    )
}

// Pass notAllowedUserGroups to AccessControl to restrict access
export default AccessControl(EditVulnerability, [UserGroupType.SECURITY_USER])
