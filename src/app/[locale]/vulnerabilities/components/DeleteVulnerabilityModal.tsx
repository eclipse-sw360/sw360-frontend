// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import MessageService from '@/services/message.service'
import { getSession } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { Dispatch, ReactNode, SetStateAction, useState, type JSX } from 'react'
import { Alert, Button, Modal } from 'react-bootstrap'
import { AiOutlineQuestionCircle } from 'react-icons/ai'

import { HttpStatus } from '@/object-types'
import { ApiUtils, CommonUtils } from '@/utils'
import { useRouter } from 'next/navigation'

interface AlertData {
    variant: string
    message: JSX.Element
}

// Parameters reloadKey and setReloadKey are used only in the vulnerabilities page
// to reload the table once the vulnerability is deleted. No need to pass them in the
// edit vulnerability page
export default function DeleteVulnerabilityModal({
    vulnerabilityId,
    setVulnerability,
    reloadKey,
    setReloadKey,
    isEditPage,
}: {
    vulnerabilityId: string | null
    setVulnerability: Dispatch<SetStateAction<string | null>>
    reloadKey?: number
    setReloadKey?: Dispatch<SetStateAction<number>>
    isEditPage: boolean
}): ReactNode {
    const t = useTranslations('default')
    const [alert, setAlert] = useState<AlertData | null>(null)
    const router = useRouter()

    const handleDelete = async (id: string) => {
        try {
            const session = await getSession()
            if (CommonUtils.isNullOrUndefined(session)) return
            const response = await ApiUtils.DELETE(`vulnerabilities/${id}`, session.user.access_token)
            if (response.status == HttpStatus.MULTIPLE_STATUS) {
                const body = (await response.json()) as Record<string, number | string>[]
                const deleteStatus = body[0].status
                if (deleteStatus == HttpStatus.OK) {
                    if (isEditPage) {
                        MessageService.success(t('Vulnerability has been deleted'))
                        router.push('/vulnerabilities')
                    } else {
                        setAlert({
                            variant: 'success',
                            message: (
                                <>
                                    <p>{t('Vulnerability has been deleted')}</p>
                                </>
                            ),
                        })
                        if (setReloadKey && reloadKey) {
                            setReloadKey(reloadKey + 1)
                        }
                    }
                } else if (deleteStatus == HttpStatus.FORBIDDEN) {
                    if (isEditPage) {
                        MessageService.error(t('Can not remove vulnerability because it is used by release'))
                    } else {
                        setAlert({
                            variant: 'danger',
                            message: (
                                <>
                                    <p>{t('Can not remove vulnerability because it is used by release')}</p>
                                </>
                            ),
                        })
                    }
                } else {
                    throw new Error(t('Error when removing vulnerability'))
                }
            } else {
                throw new Error(t('Error when removing vulnerability'))
            }
        } catch (error) {
            if (error instanceof DOMException && error.name === 'AbortError') {
                return
            }
            if (isEditPage) {
                MessageService.error(t('Error when removing vulnerability'))
            } else {
                setAlert({
                    variant: 'danger',
                    message: (
                        <>
                            <p>{t('Error when removing vulnerability')}</p>
                        </>
                    ),
                })
            }
        }
    }

    return (
        <>
            <Modal
                size='lg'
                centered
                show={vulnerabilityId === null ? false : true}
                onHide={() => {
                    setVulnerability(null)
                    setAlert(null)
                }}
                aria-labelledby={t('Delete Vulnerability')}
                scrollable
            >
                <Modal.Header
                    style={{ backgroundColor: '#feefef', color: '#da1414' }}
                    closeButton
                >
                    <Modal.Title id='linked-projects-modal'>
                        <AiOutlineQuestionCircle /> {`${t('Delete Vulnerability')}?`}
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {alert ? (
                        <Alert
                            variant={alert.variant}
                            id='linkProjects.alert'
                        >
                            {alert.message}
                        </Alert>
                    ) : (
                        vulnerabilityId !== null &&
                        t.rich('Do you really want to delete the vulnerability?', {
                            id: vulnerabilityId,
                            strong: (chunks) => <b>{chunks}</b>,
                        })
                    )}
                </Modal.Body>
                <Modal.Footer>
                    <Button
                        variant='dark'
                        onClick={() => {
                            setVulnerability(null)
                            setAlert(null)
                        }}
                    >
                        {t('Cancel')}
                    </Button>
                    {!alert && (
                        <Button
                            variant='danger'
                            onClick={() => {
                                void handleDelete(vulnerabilityId ?? '')
                            }}
                        >
                            {t('Delete Vulnerability')}
                        </Button>
                    )}
                </Modal.Footer>
            </Modal>
        </>
    )
}
