// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { signOut, useSession } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { useState, ReactNode, type JSX } from 'react';
import { Alert, Button, Modal } from 'react-bootstrap'
import { AiOutlineQuestionCircle } from 'react-icons/ai'

import { HttpStatus } from '@/object-types'
import { ApiUtils, CommonUtils } from '@/utils'

interface AlertData {
    variant: string
    message: JSX.Element
}

export default function DeleteVulnerabilityModal({
    vulnerabilityId,
    setVulnerability,
}: {
    vulnerabilityId: string | null
    setVulnerability: (id: string | null) => void
}) : ReactNode {
    const t = useTranslations('default')
    const [alert, setAlert] = useState<AlertData | null>(null)
    const { data: session, status } = useSession()
    
    const handleDelete = async (id: string) => {
        try {
            if (CommonUtils.isNullOrUndefined(session)) return
            const response = await ApiUtils.DELETE(`vulnerabilities/${id}`, session.user.access_token)
            if (response.status == HttpStatus.MULTIPLE_STATUS) {
                const body = await response.json() as Record<string, number | string>[]
                const deleteStatus = body[0].status
                if (deleteStatus == HttpStatus.OK) {
                    setAlert({
                        variant: 'success',
                        message: (
                            <>
                                <p>{t('Vulnerability has been deleted')}</p>
                            </>
                        ),
                    })
                    location.reload()
                } else if (deleteStatus == HttpStatus.FORBIDDEN) {
                    setAlert({
                        variant: 'danger',
                        message: (
                            <>
                                <p>{t('Can not remove vulnerability because it is used by release')}</p>
                            </>
                        ),
                    })
                } else {
                    setAlert({
                        variant: 'danger',
                        message: (
                            <>
                                <p>{t('Error when removing vulnerability')}</p>
                            </>
                        ),
                    })
                }
            } else if (response.status == HttpStatus.UNAUTHORIZED) {
                await signOut()
            } else {
                setAlert({
                    variant: 'danger',
                    message: (
                        <>
                            <p>{t('Error when removing vulnerability')}</p>
                        </>
                    ),
                })
            }
        } catch (e) {
            console.error(e)
        }
    }

    if (status === 'unauthenticated') {
        return signOut()
    } else {
        return (
            <>
                <Modal
                    size='lg'
                    centered
                    show={vulnerabilityId === null ? false : true}
                    onHide={() => {
                        setVulnerability(null)
                        setAlert(null)
                    }}
                    aria-labelledby={t('Delete Vulnerability')}
                    scrollable
                >
                    <Modal.Header
                        style={{ backgroundColor: '#feefef', color: '#da1414' }}
                        closeButton
                    >
                        <Modal.Title id='linked-projects-modal'>
                            <AiOutlineQuestionCircle /> {`${t('Delete Vulnerability')}?`}
                        </Modal.Title>
                    </Modal.Header>
                    <Modal.Body>
                        {alert ? (
                            <Alert
                                variant={alert.variant}
                                id='linkProjects.alert'
                            >
                                {alert.message}
                            </Alert>
                        ) : (
                            t.rich('Do you really want to delete the vulnerability?', {
                                id: vulnerabilityId,
                                strong: (chunks) => <b>{chunks}</b>,
                            })
                        )}
                    </Modal.Body>
                    <Modal.Footer>
                        <Button
                            variant='dark'
                            onClick={() => {
                                setVulnerability(null)
                                setAlert(null)
                            }}
                        >
                            {t('Cancel')}
                        </Button>
                        {!alert && (
                            <Button
                                variant='danger'
                                onClick={() => { handleDelete(vulnerabilityId ?? '').catch((error) => console.error(error)) }}
                            >
                                {t('Delete Vulnerability')}
                            </Button>
                        )}
                    </Modal.Footer>
                </Modal>
            </>
        )
    }
}
