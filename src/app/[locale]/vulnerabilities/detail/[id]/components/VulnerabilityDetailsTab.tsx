// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { ErrorDetails, HttpStatus, Vulnerability } from '@/object-types'
import MessageService from '@/services/message.service'
import { ApiUtils, CommonUtils } from '@/utils'
import { getSession, signOut } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { ReactNode, useEffect, useState } from 'react'
import { Col, ListGroup, Row, Spinner, Tab } from 'react-bootstrap'
import Summary from './Summary'

export default function VulnerabilityDetailsTab({ vulnerabilityId }: { vulnerabilityId: string }): ReactNode {
    const t = useTranslations('default')
    const [summaryData, setSummaryData] = useState<Vulnerability | undefined>(undefined)

    useEffect(() => {
        const controller = new AbortController()
        const signal = controller.signal

        void (async () => {
            try {
                const session = await getSession()
                if (CommonUtils.isNullOrUndefined(session)) return signOut()

                const response = await ApiUtils.GET(
                    `vulnerabilities/${vulnerabilityId}`,
                    session.user.access_token,
                    signal,
                )

                if (response.status !== HttpStatus.OK) {
                    const err = (await response.json()) as ErrorDetails
                    throw new Error(err.message)
                }

                const data = (await response.json()) as Vulnerability

                setSummaryData(data)
            } catch (error) {
                if (error instanceof DOMException && error.name === 'AbortError') {
                    return
                }
                const message = error instanceof Error ? error.message : String(error)
                MessageService.error(message)
            }
        })()

        return () => controller.abort()
    }, [vulnerabilityId])

    return (
        <>
            <div className='ms-5 mt-2'>
                <Tab.Container defaultActiveKey='summary'>
                    <Row>
                        <Col
                            sm='2'
                            className='me-3'
                        >
                            <ListGroup>
                                <ListGroup.Item
                                    action
                                    eventKey='summary'
                                >
                                    <div className='my-2'>{t('Summary')}</div>
                                </ListGroup.Item>
                                <ListGroup.Item
                                    action
                                    eventKey='metadata'
                                >
                                    <div className='my-2'>{t('Metadata')}</div>
                                </ListGroup.Item>
                                <ListGroup.Item
                                    action
                                    eventKey='references'
                                >
                                    <div className='my-2'>{t('References')}</div>
                                </ListGroup.Item>
                            </ListGroup>
                        </Col>
                        <Col className='ps-2 me-3'>
                            <div className='buttonheader-title my-2'>{summaryData && summaryData.title}</div>
                            <Row>
                                <Tab.Content>
                                    <Tab.Pane eventKey='summary'>
                                        {!summaryData ? (
                                            <div
                                                className='col-12'
                                                style={{ textAlign: 'center' }}
                                            >
                                                <Spinner className='spinner' />
                                            </div>
                                        ) : (
                                            <Summary summaryData={summaryData} />
                                        )}
                                    </Tab.Pane>
                                    <Tab.Pane eventKey='metadata'></Tab.Pane>
                                    <Tab.Pane eventKey='references'></Tab.Pane>
                                </Tab.Content>
                            </Row>
                        </Col>
                    </Row>
                </Tab.Container>
            </div>
        </>
    )
}
