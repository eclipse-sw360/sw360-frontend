// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { getSession, signOut } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { ChangeEvent, Dispatch, SetStateAction, useState } from 'react'
import { Alert, Button, Modal } from 'react-bootstrap'
import { AiOutlineQuestionCircle } from 'react-icons/ai'
import { VulnerabilityRatingAndActionPayload } from '@/object-types'
import { HttpStatus } from '@/object-types'
import { ApiUtils, CommonUtils } from '@/utils'

interface AlertData {
    variant: string
    message: JSX.Element
}

export default function ChangeVulnerabilityModal({
    projectId,
    selectedVulnerabilities,
    show, 
    setShow
}: {
    projectId: string
    selectedVulnerabilities: Map<string, VulnerabilityRatingAndActionPayload>,
    show: boolean, 
    setShow: Dispatch<SetStateAction<boolean>>
}): JSX.Element {
    const t = useTranslations('default')
    const [alert, setAlert] = useState<AlertData | null>(null)
    const [loading, setLoading] = useState(false)
    const [data, setData] = useState<VulnerabilityRatingAndActionPayload>({})

    const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const {name, value} = e.target
        const newFormData: VulnerabilityRatingAndActionPayload = {
            ...data,
        }
        if(value === '') {
            delete newFormData[name as keyof VulnerabilityRatingAndActionPayload]
        } else {
            newFormData[name as keyof VulnerabilityRatingAndActionPayload] = value
        }
        setData(newFormData)
    }

    const handleSubmit = async (id: string) => {
        try {
            setLoading(true)
            const session = await getSession()
            if(CommonUtils.isNullOrUndefined(session))
                return signOut()
            const payload: VulnerabilityRatingAndActionPayload[] = [...selectedVulnerabilities.values()]
            const updatedPayload = payload.map((elem: VulnerabilityRatingAndActionPayload) => ({...elem, ...data}))
            const response = await ApiUtils.PATCH(`projects/${id}/vulnerabilities`, updatedPayload, session.user.access_token)                
            if (response.status == HttpStatus.OK) {
                setAlert({
                    variant: 'success',
                    message: (
                        <>
                            <p>{t('Vulnerability has been updated')}</p>
                        </>
                    ),
                })
            } else if (response.status == HttpStatus.UNAUTHORIZED) {
                return signOut()
            } else {
                setAlert({
                    variant: 'danger',
                    message: (
                        <>
                            <p>{t('Error when updating vulnerability')}</p>
                        </>
                    ),
                })
            }
            setLoading(false)
        } catch (e) {
            console.error(e)
        }
    }

    return (
        <>
            <Modal
                size='lg'
                centered
                show={show}
                onHide={() => {
                    setAlert(null)
                    setShow(false)
                    setData({})
                }}
                aria-labelledby={t('Change Vulnerability Rating And Action')}
            >
                <Modal.Header closeButton>
                    <Modal.Title id='change-vulnerability-action-and-rating'>
                        <AiOutlineQuestionCircle /> {`${t('Change Vulnerability Rating And Action')}?`}
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {
                        alert && (
                            <Alert variant={alert.variant} id='change-vulnerability-action-and-rating.alert'>
                                {alert.message}
                            </Alert>
                        )
                    }
                    <p className="mt-2">
                        {
                            t.rich('The verification of vulnerabilities will be changed to', {
                                number: selectedVulnerabilities.size,
                                strong: (chunks) => <b>{chunks}</b>,
                            })
                        }
                    </p>
                    <hr className="my-1"/>
                    <div className="mb-3">
                        <label htmlFor="change-vulnerability-action-and-rating.project-relevance" className="form-label">{`${t("Rating")}:`}</label>
                        <select
                            className='form-select'
                            aria-label='change vulnerability rating'
                            id='change-vulnerability-action-and-rating.project-relevance'
                            name='projectRelevance'
                            value={data.projectRelevance ?? ''}
                            onChange={handleChange}
                        >
                            <option value=''>{''}</option>
                            <option value='NOT_CHECKED'>{t('Not Checked')}</option>
                            <option value='IRRELEVANT'> {t('Irrelevant')}</option>
                            <option value='RESOLVED'>{t('Resolved')}</option>
                            <option value='APPLICABLE'>{t('Applicable')}</option>
                            <option value='IN_ANALYSIS'>{t('In Analysis')}</option>
                        </select>
                    </div>
                    <div className="mb-3">
                        <label htmlFor="change-vulnerability-action-and-rating.project-action" className="form-label">{`${t("Action")}:`}</label>
                        <input 
                            type="text" 
                            className="form-control" 
                            id="change-vulnerability-action-and-rating.project-action" 
                            name="projectAction"
                            value={data.projectAction ?? ''}
                            onChange={handleChange}
                        />
                    </div>
                    <div className='mb-3'>
                        <label htmlFor='change-vulnerability-action-and-rating.comment' className='form-label'>
                            {t('Please comment your changes')}
                        </label>
                        <textarea
                            className='form-control'
                            name='comment'
                            id='change-vulnerability-action-and-rating.comment'
                            style={{ height: '100px' }}
                            value={data.comment ?? ''}
                            onChange={handleChange}
                        ></textarea>
                    </div>
                </Modal.Body>
                <Modal.Footer>
                    <Button
                        variant='dark'
                        onClick={() => {
                            setAlert(null)
                            setShow(false)
                            setData({})
                        }}
                    >
                        {t('Close')}
                    </Button>
                    <Button
                        variant='primary'
                        disabled={loading}
                        onClick={() => { void handleSubmit(projectId) } }
                    >
                        {t('Change Rating')} 
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    )
}
