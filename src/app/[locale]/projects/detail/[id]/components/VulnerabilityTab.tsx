// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { ColumnDef, getCoreRowModel, useReactTable } from '@tanstack/react-table'
import { StatusCodes } from 'http-status-codes'
import Link from 'next/link'
import { signOut, useSession } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { PageSizeSelector, ShowInfoOnHover, SW360Table, TableFooter } from 'next-sw360'
import { type JSX, useEffect, useMemo, useState } from 'react'
import { Spinner } from 'react-bootstrap'
import {
    Embedded,
    ErrorDetails,
    PageableQueryParam,
    PaginationMeta,
    ProjectData,
    ProjectVulnerability,
    ProjectVulnerabilityTabType,
    VulnerabilityRatingAndActionPayload,
} from '@/object-types'
import MessageService from '@/services/message.service'
import { ApiUtils, CommonUtils } from '@/utils'
import ChangeVulnerabilityModal from './ChangeVulnerabilityModal'

const Capitalize = (text: string) =>
    text.split('_').reduce((s, c) => s + ' ' + (c.charAt(0) + c.substring(1).toLocaleLowerCase()), '')

type EmbeddedProjectVulnerabilities = Embedded<ProjectVulnerability, 'sw360:vulnerabilityDTOes'>
type EmbeddedProjectVulnerabilitySummary = Embedded<ProjectVulnerability, 'sw360:vulnerabilitySummaries'>

export default function VulnerabilityTab({
    projectData,
    tabType,
}: {
    projectData: ProjectData
    tabType: ProjectVulnerabilityTabType
}): JSX.Element {
    const t = useTranslations('default')
    const { data: session, status } = useSession()
    const [totalVulnerabilities, setTotalVulnerabilities] = useState<number | null>(null)
    const [selectedVulnerabilities, setSelectedVulnerabilities] = useState<
        Map<string, VulnerabilityRatingAndActionPayload>
    >(new Map())
    const [show, setShow] = useState(false)

    useEffect(() => {
        if (status === 'unauthenticated') {
            void signOut()
        }
    }, [
        status,
    ])

    const handleSelect = (id: string, payload: VulnerabilityRatingAndActionPayload) => {
        const m = new Map(selectedVulnerabilities)
        if (m.has(id)) {
            m.delete(id)
        } else {
            m.set(id, payload)
        }
        setSelectedVulnerabilities(m)
    }

    const columns = useMemo<ColumnDef<ProjectVulnerability>[]>(
        () => [
            {
                id: 'selectVulnerabilityCheckbox',
                cell: ({ row }) => (
                    <input
                        className='form-check-input'
                        type='checkbox'
                        checked={selectedVulnerabilities.has(row.original.externalId ?? '')}
                        onChange={() =>
                            handleSelect(row.original.externalId, {
                                intReleaseId: row.original.intReleaseId,
                                externalId: row.original.externalId,
                            } as VulnerabilityRatingAndActionPayload)
                        }
                    />
                ),
                meta: {
                    width: '3%',
                },
            },
            {
                id: 'release',
                header: t('Release'),
                cell: ({ row }) => <div className='text-center'>{row.original.intReleaseName}</div>,
                meta: {
                    width: '15%',
                },
            },
            {
                id: 'externalId',
                header: t('External Id'),
                cell: ({ row }) => (
                    <Link
                        href={`/vulnerabilities/detail/${row.original.externalId}`}
                        className='text-link text-center'
                    >
                        {row.original.externalId}
                    </Link>
                ),
                meta: {
                    width: '15%',
                },
            },
            {
                id: 'priority',
                header: t('Priority'),
                cell: ({ row }) => (
                    <div className='text-center'>
                        {row.original.priority && (
                            <div>
                                <ShowInfoOnHover text={row.original.priorityToolTip} /> {row.original.priority}
                            </div>
                        )}
                    </div>
                ),
                meta: {
                    width: '10%',
                },
            },
            {
                id: 'matchedBy',
                header: t('Matched By'),
                cell: ({ row }) => (
                    <div className='text-center'>{row.original.releaseVulnerabilityRelation?.matchedBy ?? ''}</div>
                ),
                meta: {
                    width: '10%',
                },
            },
            {
                id: 'title',
                header: t('Title'),
                cell: ({ row }) => (
                    <span
                        className='info-text'
                        title={row.original.description}
                    >
                        {row.original.title}
                    </span>
                ),
                meta: {
                    width: '25%',
                },
            },
            {
                id: 'relevanceForProject',
                header: t('Relevance for project'),
                cell: ({ row }) => {
                    const relevance = Capitalize(row.original.projectRelevance ?? '')
                    return (
                        <div className='text-center'>
                            {relevance && (
                                <div>
                                    <ShowInfoOnHover text={relevance} /> {relevance}
                                </div>
                            )}
                        </div>
                    )
                },
                meta: {
                    width: '12%',
                },
            },
            {
                id: 'actions',
                header: t('Actions'),
                cell: ({ row }) => <div className='text-center'>{row.original.projectAction}</div>,
                meta: {
                    width: '10%',
                },
            },
        ],
        [
            t,
            selectedVulnerabilities,
        ],
    )

    const [pageableQueryParam, setPageableQueryParam] = useState<PageableQueryParam>({
        page: 0,
        page_entries: 10,
        sort: '',
    })
    const [paginationMeta, setPaginationMeta] = useState<PaginationMeta | undefined>({
        size: 0,
        totalElements: 0,
        totalPages: 0,
        number: 0,
    })
    const [vulnerabilityData, setVulnerabilityData] = useState<ProjectVulnerability[]>(() => [])
    const memoizedData = useMemo(
        () => vulnerabilityData,
        [
            vulnerabilityData,
        ],
    )
    const [showProcessing, setShowProcessing] = useState(false)

    useEffect(() => {
        if (CommonUtils.isNullOrUndefined(session)) return

        const controller = new AbortController()
        const signal = controller.signal

        const timeLimit = vulnerabilityData.length !== 0 ? 700 : 0
        const timeout = setTimeout(() => {
            setShowProcessing(true)
        }, timeLimit)

        void (async () => {
            try {
                if (tabType === ProjectVulnerabilityTabType.SUMMARY) {
                    const queryUrl = CommonUtils.createUrlWithParams(
                        `projects/${projectData.id}/vulnerabilitySummary`,
                        Object.fromEntries(
                            Object.entries(pageableQueryParam).map(([key, value]) => [
                                key,
                                String(value),
                            ]),
                        ),
                    )
                    const response = await ApiUtils.GET(queryUrl, session.user.access_token, signal)
                    if (response.status !== StatusCodes.OK) {
                        const err = (await response.json()) as ErrorDetails
                        throw new Error(err.message)
                    }

                    const data = (await response.json()) as EmbeddedProjectVulnerabilitySummary
                    setPaginationMeta(data.page)
                    setTotalVulnerabilities(data.page?.totalElements ?? 0)
                    setVulnerabilityData(
                        CommonUtils.isNullOrUndefined(data['_embedded']['sw360:vulnerabilitySummaries'])
                            ? []
                            : data['_embedded']['sw360:vulnerabilitySummaries'],
                    )
                } else {
                    const queryUrl = CommonUtils.createUrlWithParams(
                        `projects/${projectData.id}/vulnerabilities`,
                        Object.fromEntries(
                            Object.entries(pageableQueryParam).map(([key, value]) => [
                                key,
                                String(value),
                            ]),
                        ),
                    )
                    const response = await ApiUtils.GET(queryUrl, session.user.access_token, signal)
                    if (response.status !== StatusCodes.OK) {
                        const err = (await response.json()) as ErrorDetails
                        throw new Error(err.message)
                    }

                    const data = (await response.json()) as EmbeddedProjectVulnerabilities
                    setPaginationMeta(data.page)
                    setTotalVulnerabilities(data.page?.totalElements ?? 0)
                    setVulnerabilityData(
                        CommonUtils.isNullOrUndefined(data['_embedded']['sw360:vulnerabilityDTOes'])
                            ? []
                            : data['_embedded']['sw360:vulnerabilityDTOes'],
                    )
                }
            } catch (error) {
                if (error instanceof DOMException && error.name === 'AbortError') {
                    return
                }
                const message = error instanceof Error ? error.message : String(error)
                MessageService.error(message)
            } finally {
                clearTimeout(timeout)
                setShowProcessing(false)
            }
        })()

        return () => controller.abort()
    }, [
        pageableQueryParam,
        session,
    ])

    const table = useReactTable({
        data: memoizedData,
        columns,
        getCoreRowModel: getCoreRowModel(),

        // table state config
        state: {
            pagination: {
                pageIndex: pageableQueryParam.page,
                pageSize: pageableQueryParam.page_entries,
            },
            sorting: [
                {
                    id: pageableQueryParam.sort.split(',')[0],
                    desc: pageableQueryParam.sort.split(',')[1] === 'desc',
                },
            ],
        },

        // server side pagination config
        manualPagination: true,
        pageCount: paginationMeta?.totalPages ?? 1,
        onPaginationChange: (updater) => {
            const next =
                typeof updater === 'function'
                    ? updater({
                          pageIndex: pageableQueryParam.page,
                          pageSize: pageableQueryParam.page_entries,
                      })
                    : updater

            setPageableQueryParam((prev) => ({
                ...prev,
                page: next.pageIndex + 1,
                page_entries: next.pageSize,
            }))
        },
    })

    return (
        <>
            {tabType === ProjectVulnerabilityTabType.PROJECT && (
                <ChangeVulnerabilityModal
                    projectId={projectData.id}
                    selectedVulnerabilities={selectedVulnerabilities}
                    show={show}
                    setShow={setShow}
                />
            )}
            <div className='mt-4 mx-5'>
                {tabType === ProjectVulnerabilityTabType.PROJECT && (
                    <div className='mb-4'>
                        <h5 className='header-underlined'>{t('Vulnerability Status Information')}</h5>
                        <div className='row'>
                            <div className='col-lg-4'>{t('Security Vulnerability Monitoring')}:</div>
                            <div className='col-lg-3'>
                                {projectData.enableSvm ? (
                                    <span
                                        className='badge bg-success'
                                        style={{
                                            fontSize: '0.8rem',
                                        }}
                                    >
                                        {t('Enabled')}
                                    </span>
                                ) : (
                                    <span
                                        className='badge bg-light text-dark'
                                        style={{
                                            fontSize: '0.8rem',
                                        }}
                                    >
                                        {t('Disabled')}
                                    </span>
                                )}
                            </div>
                        </div>
                        <div className='row mt-3'>
                            <div className='col-lg-4'>{t('Security Vulnerabilities Display')}:</div>
                            <div className='col-lg-3'>
                                {projectData.enableVulnerabilitiesDisplay ? (
                                    <span
                                        className='badge bg-success'
                                        style={{
                                            fontSize: '0.8rem',
                                        }}
                                    >
                                        {t('Enabled')}
                                    </span>
                                ) : (
                                    <span
                                        className='badge bg-light text-dark'
                                        style={{
                                            fontSize: '0.8rem',
                                        }}
                                    >
                                        {t('Disabled')}
                                    </span>
                                )}
                            </div>
                        </div>
                    </div>
                )}
                {projectData.enableVulnerabilitiesDisplay && (
                    <div className='mb-4'>
                        {totalVulnerabilities !== null && (
                            <div
                                className='alert alert-primary'
                                role='alert'
                            >
                                {`${t('Total vulnerabilities')}: ${totalVulnerabilities}`}
                            </div>
                        )}
                        <h5 className='header-underlined'>{t('Vulnerabilities')}</h5>
                        <div className='mb-3'>
                            {pageableQueryParam && table && paginationMeta ? (
                                <>
                                    <PageSizeSelector
                                        pageableQueryParam={pageableQueryParam}
                                        setPageableQueryParam={setPageableQueryParam}
                                    />
                                    <SW360Table
                                        table={table}
                                        showProcessing={showProcessing}
                                    />
                                    <TableFooter
                                        pageableQueryParam={pageableQueryParam}
                                        setPageableQueryParam={setPageableQueryParam}
                                        paginationMeta={paginationMeta}
                                    />
                                </>
                            ) : (
                                <div className='col-12 mt-1 text-center'>
                                    <Spinner className='spinner' />
                                </div>
                            )}
                        </div>
                        {tabType === ProjectVulnerabilityTabType.PROJECT && (
                            <div className='mb-4 d-flex flex-row'>
                                <label
                                    htmlFor='change_project_vul'
                                    className='fw-bold'
                                >
                                    {t('Change rating and action of selected vulnerabilities')}
                                    <button
                                        id='change_project_vul'
                                        type='button'
                                        className='btn btn-primary ms-1'
                                        onClick={() => setShow(true)}
                                    >
                                        {t('Change')}
                                    </button>
                                </label>
                            </div>
                        )}
                    </div>
                )}
            </div>
        </>
    )
}
