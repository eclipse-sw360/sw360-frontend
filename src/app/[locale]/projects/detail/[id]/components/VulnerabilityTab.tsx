// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { Embedded, ProjectData, ProjectVulnerability, 
    VulnerabilityRatingAndActionPayload, ProjectVulnerabilityTabType } from '@/object-types'
import { SW360_API_URL } from '@/utils/env'
import { useSession } from 'next-auth/react'
import { ShowInfoOnHover, Table, _ } from 'next-sw360'
import Link from 'next/link'
import { useState } from 'react'
import { useTranslations } from 'next-intl'
import ChangeVulnerabilityModal from './ChangeVulnerabilityModal'
import { Spinner } from 'react-bootstrap'
import { CommonUtils } from '@/utils'

const Capitalize = (text: string) =>
    text.split('_').reduce((s, c) => s + ' ' + (c.charAt(0) + c.substring(1).toLocaleLowerCase()), '')

type EmbeddedProjectVulnerabilities = Embedded<ProjectVulnerability, 'sw360:vulnerabilityDTOes'>
type EmbeddedProjectVulnerabilitySummary = Embedded<ProjectVulnerability, 'sw360:vulnerabilitySummaries'>

export default function VulnerabilityTab({ projectData, tabType }: { projectData: ProjectData, tabType: ProjectVulnerabilityTabType }): JSX.Element {
    const t = useTranslations('default')
    const { data: session, status } = useSession()
    const [totalVulnerabilities, setTotalVulnerabilities] = useState<number | null>(null)
    const [selectedVulnerabilities, setSelectedVulnerabilities] = useState<Map<string, VulnerabilityRatingAndActionPayload>>(new Map())
    const [show, setShow] = useState(false)

    const handleSelect = (id: string, payload: VulnerabilityRatingAndActionPayload) => {
        const m = new Map(selectedVulnerabilities)
        if(m.has(id)) {
            m.delete(id)
        } else {
            m.set(id, payload)
        }
        setSelectedVulnerabilities(m)
    }

    const columns = [
        {
            id: 'projectVulnerabilities.checkbox',
            formatter: ({ id, payload, handleSelect, selectedVulnerabilities } : 
                { 
                    id: string, 
                    payload: VulnerabilityRatingAndActionPayload, 
                    selectedVulnerabilities: Map<string, VulnerabilityRatingAndActionPayload>
                    handleSelect: (id: string, payload: VulnerabilityRatingAndActionPayload) => void
                }) =>
                _(
                    <input
                        className='form-check-input'
                        type='checkbox'
                        checked={selectedVulnerabilities.has(id)}
                        onChange={() => handleSelect(id, payload)}
                    />
                ),
            width: '4%',
            sort: true,
        },
        {
            id: 'projectVulnerabilities.release',
            name: t('Release'),
            formatter: (release: string) => _(<div className='text-center'>{release}</div>),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.externalId',
            name: t('External Id'),
            width: '8%',
            formatter: (id: string) =>
                _(
                    <Link href={`/vulnerabilties/detail/${id}`} className='text-link text-center'>
                        {id}
                    </Link>
                ),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.priority',
            name: t('Priority'),
            width: '10%',
            formatter: ({ priority, priorityToolTip }: { priority: string; priorityToolTip: string }) =>
                _(
                    <div className='text-center'>
                        {
                            priority &&
                            <div><ShowInfoOnHover text={priorityToolTip} /> {priority}</div>
                        }
                    </div>
                ),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.matchedBy',
            name: t('Matched By'),
            formatter: (matchedBy: string) => _(<div className='text-center'>{matchedBy}</div>),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.title',
            name: t('Title'),
            formatter: ({ title, description }: { title: string; description: string }) =>
                _(
                    <span className='info-text' title={description}>
                        {title}
                    </span>
                ),
            width: '25%',
            sort: true,
        },
        {
            id: 'projectVulnerabilities.relevanceForProject',
            name: t('Relevance for project'),
            formatter: (relevance: string) =>
                _(
                    <div className='text-center'>
                        {
                            relevance &&
                            <div><ShowInfoOnHover text={relevance} /> {relevance}</div>
                        }
                    </div>
                ),
            sort: true,
            width: '12%',
        },
        {
            id: 'projectVulnerabilities.actions',
            name: t('Actions'),
            formatter: (actions: string) => _(<div className='text-center'>{actions}</div>),
            width: '12%',
            sort: true,
        },
    ]

    const initServerPaginationConfig = () => { 
        if (CommonUtils.isNullOrUndefined(session)) return
        return {
            url: tabType === ProjectVulnerabilityTabType.SUMMARY 
                ? `${SW360_API_URL}/resource/api/projects/${projectData.id}/vulnerabilitySummary`
                : `${SW360_API_URL}/resource/api/projects/${projectData.id}/vulnerabilities`,
            then: (data: EmbeddedProjectVulnerabilities | EmbeddedProjectVulnerabilitySummary) => {
                setTotalVulnerabilities(data.page?.totalElements ?? 0)
                const rows = tabType === ProjectVulnerabilityTabType.SUMMARY
                                ? (data as EmbeddedProjectVulnerabilitySummary)._embedded['sw360:vulnerabilitySummaries']
                                : (data as EmbeddedProjectVulnerabilities)._embedded['sw360:vulnerabilityDTOes']
                return rows.map((elem: ProjectVulnerability) => [
                    { 
                        id: elem.releaseVulnerabilityRelation.vulnerabilityId, 
                        payload: {
                            intReleaseId: elem.intReleaseId,
                            externalId: elem.externalId
                        },
                        selectedVulnerabilities: selectedVulnerabilities,
                        handleSelect: handleSelect
                    },
                    elem.intReleaseName,
                    elem.externalId,
                    { priority: elem.priority, priorityTooltip: elem.priorityToolTip },
                    elem.releaseVulnerabilityRelation.matchedBy,
                    { title: elem.title, description: elem.description },
                    Capitalize(elem.projectRelevance),
                    elem.projectAction,
                ])
            },
            total: (data: EmbeddedProjectVulnerabilities) => data.page?.totalElements ?? 0,
            headers: { Authorization: `${status === 'authenticated' ? session.user.access_token : ''}` },
        }
    }

    return (
        <>
            {
                tabType === ProjectVulnerabilityTabType.PROJECT &&
                <ChangeVulnerabilityModal 
                    projectId={projectData.id} 
                    selectedVulnerabilities={selectedVulnerabilities}
                    show={show}
                    setShow={setShow}
                />
            }
            <div className='mt-4 mx-5'>
                {
                    tabType === ProjectVulnerabilityTabType.PROJECT &&
                    <div className='mb-4'>
                        <h5 className="header-underlined">
                            {t('Vulnerability Status Information')}
                        </h5>
                        <div className='row'>
                            <div className='col-lg-4'>{t('Security Vulnerability Monitoring')}:</div>
                            <div className='col-lg-3'>
                                {projectData.enableSvm ? (
                                    <span className='badge bg-success' style={{ fontSize: '0.8rem' }}>
                                        {t('Enabled')}
                                    </span>
                                ) : (
                                    <span className='badge bg-light text-dark' style={{ fontSize: '0.8rem' }}>
                                        {t('Disabled')}
                                    </span>
                                )}
                            </div>
                        </div>
                        <div className='row mt-3'>
                            <div className='col-lg-4'>{t('Security Vulnerabilities Display')}:</div>
                            <div className='col-lg-3'>
                                {projectData.enableVulnerabilitiesDisplay ? (
                                    <span className='badge bg-success' style={{ fontSize: '0.8rem' }}>
                                        {t('Enabled')}
                                    </span>
                                ) : (
                                    <span className='badge bg-light text-dark' style={{ fontSize: '0.8rem' }}>
                                        {t('Disabled')}
                                    </span>
                                )}
                            </div>
                        </div>
                    </div>
                }
                {projectData.enableVulnerabilitiesDisplay && (
                    <div className='mb-4'>
                        {totalVulnerabilities !== null && (
                            <div className='alert alert-primary' role='alert'>
                                {`${t('Total vulnerabilities')}: ${totalVulnerabilities}`}
                            </div>
                        )}
                        <h5 className="header-underlined">
                            {t('Vulnerabilities')}
                        </h5>
                        {status === 'authenticated' ? (
                            <Table columns={columns} server={initServerPaginationConfig()} selector={true} sort={false} />
                        ) : (
                            <div className='col-12 d-flex justify-content-center align-items-center'>
                                <Spinner className='spinner' />
                            </div>
                        )}
                        {
                            tabType === ProjectVulnerabilityTabType.PROJECT &&
                            <div className="mb-4 d-flex flex-row">
                                <label htmlFor="change_project_vul" className="fw-bold">{t("Change rating and action of selected vulnerabilities")}
                                    <button
                                        id="change_project_vul"
                                        type="button"
                                        className="btn btn-primary ms-1"
                                        onClick={() => setShow(true)}
                                    >
                                        {t("Change")}
                                    </button>
                                </label>
                            </div>
                        }
                    </div>
                )}
            </div>
        </>
    )
}
