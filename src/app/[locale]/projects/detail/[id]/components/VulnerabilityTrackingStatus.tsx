// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'
import {
    ErrorDetails,
    HttpStatus,
    PageableQueryParam,
    PaginationMeta,
    ProjectData,
    ProjectVulnerabilityTrackingStatus,
    VulnerabilityTrackingStatus,
} from '@/object-types'
import MessageService from '@/services/message.service'
import { ApiUtils, CommonUtils } from '@/utils'
import { ColumnDef, getCoreRowModel, useReactTable } from '@tanstack/react-table'
import { signOut, useSession } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { PageSizeSelector, SW360Table, TableFooter } from 'next-sw360'
import Link from 'next/link'
import { useEffect, useMemo, useState, type JSX } from 'react'
import { Spinner } from 'react-bootstrap'

export default function VulnerabilityTrackingStatusComponent({
    projectData,
}: {
    projectData: ProjectData
}): JSX.Element {
    const t = useTranslations('default')
    const { data: session, status } = useSession()

    useEffect(() => {
        if (status === 'unauthenticated') {
            void signOut()
        }
    }, [status])

    const columns = useMemo<ColumnDef<VulnerabilityTrackingStatus>[]>(
        () => [
            {
                id: 'name',
                header: t('Name'),
                cell: ({ row }) => (
                    <Link
                        href={`/component/release/detail/${row.original.releaseId}`}
                        className='text-link text-center'
                    >
                        {row.original.name}
                    </Link>
                ),
            },
            {
                id: 'projectOrigin',
                accessorKey: 'projectOrigin',
                header: t('Project Origin'),
                cell: (info) => info.getValue(),
            },
            {
                id: 'svmTrackingStatus',
                accessorKey: 'svmTrackingStatus',
                header: t('SVM Tracking Status'),
                cell: (info) => info.getValue(),
            },
            {
                id: 'shortStatus',
                header: t('Short Status'),
                accessorKey: 'shortStatus',
                cell: (info) => info.getValue(),
            },
            {
                id: 'type',
                accessorKey: 'type',
                header: t('Type'),
                cell: (info) => info.getValue(),
            },
        ],
        [t],
    )
    const [pageableQueryParam, setPageableQueryParam] = useState<PageableQueryParam>({
        page: 0,
        page_entries: 10,
        sort: '',
    })
    const [paginationMeta, setPaginationMeta] = useState<PaginationMeta | undefined>({
        size: 0,
        totalElements: 0,
        totalPages: 0,
        number: 0,
    })
    const [vulnerabilityData, setVulnerabilityData] = useState<VulnerabilityTrackingStatus[]>(() => [])
    const memoizedData = useMemo(() => vulnerabilityData, [vulnerabilityData])
    const [showProcessing, setShowProcessing] = useState(false)

    useEffect(() => {
        if (CommonUtils.isNullOrUndefined(session)) return
        const controller = new AbortController()
        const signal = controller.signal

        const timeLimit = vulnerabilityData.length !== 0 ? 700 : 0
        const timeout = setTimeout(() => {
            setShowProcessing(true)
        }, timeLimit)

        void (async () => {
            try {
                const queryUrl = CommonUtils.createUrlWithParams(
                    `vulnerabilities/trackingStatus/${projectData.id}`,
                    Object.fromEntries(
                        Object.entries({ ...pageableQueryParam }).map(([key, value]) => [key, String(value)]),
                    ),
                )
                const response = await ApiUtils.GET(queryUrl, session.user.access_token, signal)
                if (response.status !== HttpStatus.OK) {
                    const err = (await response.json()) as ErrorDetails
                    throw new Error(err.message)
                }

                const data = (await response.json()) as ProjectVulnerabilityTrackingStatus
                setPaginationMeta(data.page)
                setVulnerabilityData(data.vulnerabilityTrackingStatus ?? [])
            } catch (error) {
                if (error instanceof DOMException && error.name === 'AbortError') {
                    return
                }
                const message = error instanceof Error ? error.message : String(error)
                MessageService.error(message)
            } finally {
                clearTimeout(timeout)
                setShowProcessing(false)
            }
        })()

        return () => controller.abort()
    }, [pageableQueryParam, session])

    const table = useReactTable({
        data: memoizedData,
        columns,
        getCoreRowModel: getCoreRowModel(),

        // table state config
        state: {
            pagination: {
                pageIndex: pageableQueryParam.page,
                pageSize: pageableQueryParam.page_entries,
            },
            sorting: [
                {
                    id: pageableQueryParam.sort.split(',')[0],
                    desc: pageableQueryParam.sort.split(',')[1] === 'desc',
                },
            ],
        },

        // server side pagination config
        manualPagination: true,
        pageCount: paginationMeta?.totalPages ?? 1,
        onPaginationChange: (updater) => {
            const next =
                typeof updater === 'function'
                    ? updater({
                          pageIndex: pageableQueryParam.page,
                          pageSize: pageableQueryParam.page_entries,
                      })
                    : updater

            setPageableQueryParam((prev) => ({
                ...prev,
                page: next.pageIndex + 1,
                page_entries: next.pageSize,
            }))
        },
    })

    return (
        <>
            <div className='mt-4 mx-5'>
                <div className='mb-4'>
                    <h5 className='header-underlined'>{t('Vulnerability Status Information')}</h5>
                    <div className='row'>
                        <div className='col-lg-4'>{t('Security Vulnerability Monitoring')}:</div>
                        <div className='col-lg-3'>
                            {projectData.enableSvm ? (
                                <span
                                    className='badge bg-success'
                                    style={{ fontSize: '0.8rem' }}
                                >
                                    {t('Enabled')}
                                </span>
                            ) : (
                                <span
                                    className='badge bg-light text-dark'
                                    style={{ fontSize: '0.8rem' }}
                                >
                                    {t('Disabled')}
                                </span>
                            )}
                        </div>
                    </div>
                    <div className='row mt-3'>
                        <div className='col-lg-4'>{t('Security Vulnerabilities Display')}:</div>
                        <div className='col-lg-3'>
                            {projectData.enableVulnerabilitiesDisplay ? (
                                <span
                                    className='badge bg-success'
                                    style={{ fontSize: '0.8rem' }}
                                >
                                    {t('Enabled')}
                                </span>
                            ) : (
                                <span
                                    className='badge bg-light text-dark'
                                    style={{ fontSize: '0.8rem' }}
                                >
                                    {t('Disabled')}
                                </span>
                            )}
                        </div>
                    </div>
                </div>
                <div className='mb-3'>
                    {pageableQueryParam && table && paginationMeta ? (
                        <>
                            <PageSizeSelector
                                pageableQueryParam={pageableQueryParam}
                                setPageableQueryParam={setPageableQueryParam}
                            />
                            <SW360Table
                                table={table}
                                showProcessing={showProcessing}
                            />
                            <TableFooter
                                pageableQueryParam={pageableQueryParam}
                                setPageableQueryParam={setPageableQueryParam}
                                paginationMeta={paginationMeta}
                            />
                        </>
                    ) : (
                        <div className='col-12 mt-1 text-center'>
                            <Spinner className='spinner' />
                        </div>
                    )}
                </div>
            </div>
        </>
    )
}
